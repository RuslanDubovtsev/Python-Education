from flask import Flask, jsonify
import requests
import json

electro_shop_moscow_city = [
    [
        {
            "название": "Смартфон X12",
            "категория": "Электроника",
            "цена": 299.99,
            "количество на складе": 150,
            "описание": "Смартфон с 6.5-дюймовым экраном, 128 ГБ памяти, 48 МП камерой."
        },
        {
            "название": "Умные часы Z1",
            "категория": "Аксессуары",
            "цена": 199.99,
            "количество на складе": 75,
            "описание": "Умные часы с мониторингом здоровья, уведомлениями и встроенным GPS."
        },
        {
            "название": "Наушники SoundMax",
            "категория": "Аудио",
            "цена": 89.99,
            "количество на складе": 200,
            "описание": "Беспроводные наушники с шумоподавлением и длительным временем работы от батареи."
        },
        {
            "название": "Фитнес-трекер FitBand",
            "категория": "Аксессуары",
            "цена": 49.99,
            "количество на складе": 300,
            "описание": "Фитнес-трекер с мониторингом пульса и шагомером."
        }
    ],
    [
        {
            "название": "Ноутбук ProBook 450",
            "категория": "Компьютеры",
            "цена": 799.99,
            "количество на складе": 50,
            "описание": "Ноутбук с 15.6-дюймовым экраном, Intel i5, 16 ГБ ОЗУ и 512 ГБ SSD."
        },
        {
            "название": "Камера DSLR 3000D",
            "категория": "Фото",
            "цена": 499.99,
            "количество на складе": 30,
            "описание": "Цифровая зеркальная камера с 18 МП, 3-дюймовым экраном и набором объективов."
        },
        {
            "название": "Монитор 27\" Ultra HD",
            "категория": "Компьютеры",
            "цена": 349.99,
            "количество на складе": 20,
            "описание": "Монитор с разрешением 4K и поддержкой HDR."
        },
        {
            "название": "Клавиатура Mechanical Pro",
            "категория": "Аксессуары",
            "цена": 129.99,
            "количество на складе": 100,
            "описание": "Механическая клавиатура с RGB подсветкой и программируемыми клавишами."
        }
    ],
    [
        {
            "название": "Планшет Tab X10",
            "категория": "Электроника",
            "цена": 399.99,
            "количество на складе": 80,
            "описание": "Планшет с 10.5-дюймовым экраном и 64 ГБ памяти."
        },
        {
            "название": "Беспроводная колонка SoundBox",
            "категория": "Аудио",
            "цена": 69.99,
            "количество на складе": 150,
            "описание": "Беспроводная колонка с мощным звуком и длительным временем работы от батареи."
        },
        {
            "название": "Внешний жесткий диск 2TB",
            "категория": "Хранение данных",
            "цена": 89.99,
            "количество на складе": 200,
            "описание": "Жесткий диск на 2 ТБ для хранения больших объемов данных."
        },
        {
            "название": "Мышь Gaming X300",
            "категория": "Аксессуары",
            "цена": 39.99,
            "количество на складе": 250,
            "описание": "Игровая мышь с высокой чувствительностью и RGB подсветкой."
        }
    ],
    [
        {
            "название": "Телевизор 55\" 4K",
            "категория": "Электроника",
            "цена": 699.99,
            "количество на складе": 40,
            "описание": "Ультратонкий телевизор с разрешением 4K и поддержкой Smart TV."
        },
        {
            "название": "Кофеварка Espresso Pro",
            "категория": "Бытовая техника",
            "цена": 129.99,
            "количество на складе": 60,
            "описание": "Эспрессо-кофеварка с функцией капучино и автоматическим управлением."
        },
        {
            "название": "Электрическая зубная щетка",
            "категория": "Здоровье",
            "цена": 49.99,
            "количество на складе": 100,
            "описание": "Электрическая зубная щетка с режимами чистки и таймером."
        },
        {
            "название": "Робот-пылесос CleanBot",
            "категория": "Бытовая техника",
            "цена": 249.99,
            "количество на складе": 30,
            "описание": "Робот-пылесос с функцией очистки и автоматической подзарядкой."
        }
    ],
    [
        {
            "название": "Смарт-лампочка Hue",
            "категория": "Умный дом",
            "цена": 29.99,
            "количество на складе": 400,
            "описание": "Смарт-лампочка с управлением через приложение и настройками цвета."
        },
        {
            "название": "Беспроводной маршрутизатор Wi-Fi 6",
            "категория": "Сети",
            "цена": 99.99,
            "количество на складе": 120,
            "описание": "Маршрутизатор с поддержкой Wi-Fi 6 и высокой скоростью передачи данных."
        },
        {
            "название": "Сумка для ноутбука 15\"",
            "категория": "Аксессуары",
            "цена": 59.99,
            "количество на складе": 80,
            "описание": "Стильная и удобная сумка для переноски ноутбука."
        },
        {
            "название": "Электрическая плита",
            "категория": "Бытовая техника",
            "цена": 199.99,
            "количество на складе": 25,
            "описание": "Электрическая плита с индукционными конфорками и сенсорным управлением."
        }
    ]
]

# electro_shop_moscow_city_json = json.loads()

def price_good():
    my_list = []
    for elem in electro_shop_moscow_city:
        for i in elem:
            my_list.append(i)

    return my_list

def more_small(arg, price):
    list_ = []
    if arg == "more":
        for i in price_good():
            if i["цена"] > price:
                list_.append(["цена"])
        return list_

# print(price_good())
def detail_good(price):
    # result = price_good()[]
    return 

app = Flask(__name__)

@app.route('/')
def main_page():
    return jsonify({'electro_shop_moscow_city': electro_shop_moscow_city})

@app.route('/<float:price>', methods=['GET'])
def detail_page(price):
    print(price)
    good = list(filter(lambda g: g['цена'] == price, price_good()))
    return jsonify({'good': good})

# @app.route('/<magnitude>/<float:price>', methods=['GET'])
# def detail_page(magnitude):
#     print(magnitude)
#     good = list(filter(lambda g: g['цена'] > == price, price_good()))
#     return jsonify({'good': good})

# @app.route('/<name>'), method=['GET'])


if __name__ == '__main__':
    app.run(debug=True)